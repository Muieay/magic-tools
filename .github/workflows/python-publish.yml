# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  push:
    tags:
      - "*"

permissions:
  contents: write
  id-token: write

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Clean previous builds
        run: |
          rm -rf dist/ build/ *.egg-info/

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          pip install setuptools wheel twine

      - name: Build release distributions
        run: |
          python -m pip install build
          rm -rf dist/ build/ *.egg-info/ release-dists/ release-build/
          python -m build

      - name: Verify built version
        run: |
          ls -l dist/
          unzip -p dist/*.whl */METADATA | grep Version

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/magic-tools/${{ github.ref_name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: false
          verbose: true

  github-release:
    runs-on: ubuntu-latest
    needs:
      - release-build

    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          asset_path: dist/
          asset_name: magic-tools-${{ github.ref_name }}.zip
          asset_content_type: application/zip
